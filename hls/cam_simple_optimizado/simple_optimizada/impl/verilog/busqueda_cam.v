// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module busqueda_cam (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tree_V_address0,
        tree_V_ce0,
        tree_V_q0,
        nodo_V,
        relationship_V,
        fatherSearch,
        result_V_V_din,
        result_V_V_full_n,
        result_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state5 = 4'd4;
parameter    ap_ST_fsm_pp1_stage0 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] tree_V_address0;
output   tree_V_ce0;
input  [23:0] tree_V_q0;
input  [10:0] nodo_V;
input  [1:0] relationship_V;
input   fatherSearch;
output  [10:0] result_V_V_din;
input   result_V_V_full_n;
output   result_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] tree_V_address0;
reg tree_V_ce0;
reg[10:0] result_V_V_din;
reg result_V_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    result_V_V_blk_n;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] and_ln22_reg_302;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln30_reg_279;
wire    ap_CS_fsm_state5;
reg   [10:0] i1_0_reg_123;
reg   [10:0] i_0_reg_134;
wire   [0:0] fatherSearch_read_read_fu_76_p2;
wire   [0:0] icmp_ln25_fu_175_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] i_1_fu_181_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln30_fu_206_p2;
reg   [10:0] tmp_V_1_reg_283;
wire   [0:0] icmp_ln17_fu_212_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_state8_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] i_fu_218_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] and_ln22_fu_243_p2;
wire   [10:0] grp_fu_145_p4;
reg   [10:0] tmp_V_reg_306;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire   [63:0] zext_ln27_fu_187_p1;
wire   [63:0] zext_ln19_fu_224_p1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire   [1:0] node_relation_V_1_fu_192_p1;
wire   [0:0] icmp_ln879_1_fu_196_p2;
wire   [0:0] icmp_ln879_3_fu_201_p2;
wire   [10:0] compare_node_V_fu_165_p4;
wire   [1:0] node_relation_V_fu_229_p1;
wire   [0:0] icmp_ln879_fu_233_p2;
wire   [0:0] icmp_ln879_2_fu_238_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_0_reg_123 <= 11'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_0_reg_123 <= i_1_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_134 <= 11'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln17_fu_212_p2 == 1'd0))) begin
        i_0_reg_134 <= i_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        and_ln22_reg_302 <= and_ln22_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln30_reg_279 <= and_ln30_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln30_fu_206_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_1_reg_283 <= {{tree_V_q0[12:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln22_fu_243_p2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_V_reg_306 <= {{tree_V_q0[23:13]}};
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_175_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_212_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln30_reg_279) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'd1 == and_ln22_reg_302) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        result_V_V_blk_n = result_V_V_full_n;
    end else begin
        result_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln22_reg_302) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        result_V_V_din = tmp_V_reg_306;
    end else if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        result_V_V_din = 11'd0;
    end else if (((1'd1 == and_ln30_reg_279) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        result_V_V_din = tmp_V_1_reg_283;
    end else begin
        result_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln30_reg_279) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'd1 == and_ln22_reg_302) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        result_V_V_write = 1'b1;
    end else begin
        result_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tree_V_address0 = zext_ln19_fu_224_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tree_V_address0 = zext_ln27_fu_187_p1;
    end else begin
        tree_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        tree_V_ce0 = 1'b1;
    end else begin
        tree_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_start == 1'b1) & (fatherSearch_read_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln25_fu_175_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln25_fu_175_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln17_fu_212_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((icmp_ln17_fu_212_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln22_fu_243_p2 = (icmp_ln879_fu_233_p2 & icmp_ln879_2_fu_238_p2);

assign and_ln30_fu_206_p2 = (icmp_ln879_3_fu_201_p2 & icmp_ln879_1_fu_196_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'd1 == and_ln30_reg_279) & (result_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'd1 == and_ln30_reg_279) & (result_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'd1 == and_ln30_reg_279) & (result_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'd1 == and_ln22_reg_302) & (result_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'd1 == and_ln22_reg_302) & (result_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'd1 == and_ln22_reg_302) & (result_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((1'd1 == and_ln30_reg_279) & (result_V_V_full_n == 1'b0));
end

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter2 = ((1'd1 == and_ln22_reg_302) & (result_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign compare_node_V_fu_165_p4 = {{tree_V_q0[12:2]}};

assign fatherSearch_read_read_fu_76_p2 = fatherSearch;

assign grp_fu_145_p4 = {{tree_V_q0[23:13]}};

assign i_1_fu_181_p2 = (i1_0_reg_123 + 11'd1);

assign i_fu_218_p2 = (i_0_reg_134 + 11'd1);

assign icmp_ln17_fu_212_p2 = ((i_0_reg_134 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_175_p2 = ((i1_0_reg_123 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_196_p2 = ((grp_fu_145_p4 == nodo_V) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_238_p2 = ((node_relation_V_fu_229_p1 == relationship_V) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_201_p2 = ((node_relation_V_1_fu_192_p1 == relationship_V) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_233_p2 = ((compare_node_V_fu_165_p4 == nodo_V) ? 1'b1 : 1'b0);

assign node_relation_V_1_fu_192_p1 = tree_V_q0[1:0];

assign node_relation_V_fu_229_p1 = tree_V_q0[1:0];

assign zext_ln19_fu_224_p1 = i_0_reg_134;

assign zext_ln27_fu_187_p1 = i1_0_reg_123;

endmodule //busqueda_cam
