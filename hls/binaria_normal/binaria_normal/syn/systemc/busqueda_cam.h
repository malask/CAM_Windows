// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _busqueda_cam_HH_
#define _busqueda_cam_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct busqueda_cam : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > tree_V_address0;
    sc_out< sc_logic > tree_V_ce0;
    sc_in< sc_lv<24> > tree_V_q0;
    sc_out< sc_lv<10> > tree_V_address1;
    sc_out< sc_logic > tree_V_ce1;
    sc_in< sc_lv<24> > tree_V_q1;
    sc_in< sc_lv<11> > nodo_V;
    sc_in< sc_lv<2> > relationship_V;
    sc_in< sc_logic > fatherSearch;
    sc_out< sc_lv<11> > result_V_V_din;
    sc_in< sc_logic > result_V_V_full_n;
    sc_out< sc_logic > result_V_V_write;


    // Module declarations
    busqueda_cam(sc_module_name name);
    SC_HAS_PROCESS(busqueda_cam);

    ~busqueda_cam();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > result_V_V_blk_n;
    sc_signal< sc_lv<1> > and_ln25_fu_219_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > or_ln35_fu_318_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > or_ln36_reg_409;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > or_ln45_fu_292_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > or_ln46_reg_392;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > and_ln25_reg_351;
    sc_signal< sc_lv<1> > fatherSearch_read_read_fu_60_p2;
    sc_signal< sc_lv<1> > tmp_fu_259_p3;
    sc_signal< sc_lv<1> > tmp_1_fu_231_p3;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln35_1_fu_225_p2;
    sc_signal< sc_lv<1> > icmp_ln35_1_reg_355;
    sc_signal< bool > ap_predicate_op46_write_state2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<1> > or_ln46_fu_302_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<11> > tmp_V_3_reg_396;
    sc_signal< sc_lv<10> > i_1_fu_307_p2;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<1> > or_ln36_fu_328_p2;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<11> > grp_fu_162_p4;
    sc_signal< sc_lv<11> > tmp_V_2_reg_413;
    sc_signal< sc_lv<10> > i_fu_333_p2;
    sc_signal< bool > ap_block_state6;
    sc_signal< sc_lv<10> > i1_0_reg_127;
    sc_signal< sc_lv<10> > i_0_reg_139;
    sc_signal< sc_lv<64> > zext_ln41_fu_239_p1;
    sc_signal< sc_lv<64> > zext_ln42_fu_254_p1;
    sc_signal< sc_lv<64> > zext_ln31_fu_267_p1;
    sc_signal< sc_lv<64> > zext_ln32_fu_282_p1;
    sc_signal< sc_lv<11> > grp_fu_151_p4;
    sc_signal< sc_lv<1> > icmp_ln25_fu_213_p2;
    sc_signal< sc_lv<1> > and_ln25_fu_219_p1;
    sc_signal< sc_lv<9> > trunc_ln39_fu_244_p1;
    sc_signal< sc_lv<9> > or_ln42_fu_248_p2;
    sc_signal< sc_lv<9> > trunc_ln30_fu_272_p1;
    sc_signal< sc_lv<9> > or_ln32_fu_276_p2;
    sc_signal< sc_lv<1> > icmp_ln45_fu_287_p2;
    sc_signal< sc_lv<1> > icmp_ln46_fu_297_p2;
    sc_signal< sc_lv<11> > compare_node_min_V_fu_183_p4;
    sc_signal< sc_lv<1> > icmp_ln35_fu_313_p2;
    sc_signal< sc_lv<11> > compare_node_max_V_fu_203_p4;
    sc_signal< sc_lv<1> > icmp_ln36_fu_323_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<10> ap_const_lv10_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln25_fu_219_p1();
    void thread_and_ln25_fu_219_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3();
    void thread_ap_block_state4();
    void thread_ap_block_state5();
    void thread_ap_block_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op46_write_state2();
    void thread_ap_ready();
    void thread_compare_node_max_V_fu_203_p4();
    void thread_compare_node_min_V_fu_183_p4();
    void thread_fatherSearch_read_read_fu_60_p2();
    void thread_grp_fu_151_p4();
    void thread_grp_fu_162_p4();
    void thread_i_1_fu_307_p2();
    void thread_i_fu_333_p2();
    void thread_icmp_ln25_fu_213_p2();
    void thread_icmp_ln35_1_fu_225_p2();
    void thread_icmp_ln35_fu_313_p2();
    void thread_icmp_ln36_fu_323_p2();
    void thread_icmp_ln45_fu_287_p2();
    void thread_icmp_ln46_fu_297_p2();
    void thread_or_ln32_fu_276_p2();
    void thread_or_ln35_fu_318_p2();
    void thread_or_ln36_fu_328_p2();
    void thread_or_ln42_fu_248_p2();
    void thread_or_ln45_fu_292_p2();
    void thread_or_ln46_fu_302_p2();
    void thread_result_V_V_blk_n();
    void thread_result_V_V_din();
    void thread_result_V_V_write();
    void thread_tmp_1_fu_231_p3();
    void thread_tmp_fu_259_p3();
    void thread_tree_V_address0();
    void thread_tree_V_address1();
    void thread_tree_V_ce0();
    void thread_tree_V_ce1();
    void thread_trunc_ln30_fu_272_p1();
    void thread_trunc_ln39_fu_244_p1();
    void thread_zext_ln31_fu_267_p1();
    void thread_zext_ln32_fu_282_p1();
    void thread_zext_ln41_fu_239_p1();
    void thread_zext_ln42_fu_254_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
