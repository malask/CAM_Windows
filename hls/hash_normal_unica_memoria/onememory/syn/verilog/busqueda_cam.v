// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module busqueda_cam (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        tree_V_address0,
        tree_V_ce0,
        tree_V_q0,
        nodo_V,
        relationship_V,
        fatherSearch,
        result_V_V_din,
        result_V_V_full_n,
        result_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] tree_V_address0;
output   tree_V_ce0;
input  [23:0] tree_V_q0;
input  [10:0] nodo_V;
input  [1:0] relationship_V;
input   fatherSearch;
output  [10:0] result_V_V_din;
input   result_V_V_full_n;
output   result_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tree_V_ce0;
reg[10:0] result_V_V_din;
reg result_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    result_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] fatherSearch_read_read_fu_42_p2;
wire   [0:0] and_ln61_fu_152_p2;
wire   [0:0] and_ln52_fu_130_p2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg    ap_predicate_op19_write_state2;
reg    ap_predicate_op29_write_state2;
reg    ap_block_state2;
wire   [10:0] grp_fu_82_p4;
wire   [1:0] trunc_ln647_1_fu_114_p1;
wire   [0:0] icmp_ln879_2_fu_118_p2;
wire   [0:0] icmp_ln879_3_fu_124_p2;
wire   [10:0] p_Result_7_fu_104_p4;
wire   [1:0] trunc_ln647_fu_136_p1;
wire   [0:0] icmp_ln879_fu_140_p2;
wire   [0:0] icmp_ln879_1_fu_146_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'd1 == and_ln52_fu_130_p2) & (fatherSearch_read_read_fu_42_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'd1 == and_ln61_fu_152_p2) & (fatherSearch_read_read_fu_42_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        result_V_V_blk_n = result_V_V_full_n;
    end else begin
        result_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        result_V_V_din = 11'd0;
    end else if ((~(((result_V_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)) | ((result_V_V_full_n == 1'b0) & (ap_predicate_op19_write_state2 == 1'b1))) & (ap_predicate_op29_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        result_V_V_din = {{tree_V_q0[23:13]}};
    end else if ((~(((result_V_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)) | ((result_V_V_full_n == 1'b0) & (ap_predicate_op19_write_state2 == 1'b1))) & (ap_predicate_op19_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        result_V_V_din = {{tree_V_q0[12:2]}};
    end else begin
        result_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~(((result_V_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)) | ((result_V_V_full_n == 1'b0) & (ap_predicate_op19_write_state2 == 1'b1))) & (ap_predicate_op29_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~(((result_V_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)) | ((result_V_V_full_n == 1'b0) & (ap_predicate_op19_write_state2 == 1'b1))) & (ap_predicate_op19_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        result_V_V_write = 1'b1;
    end else begin
        result_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tree_V_ce0 = 1'b1;
    end else begin
        tree_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((result_V_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)) | ((result_V_V_full_n == 1'b0) & (ap_predicate_op19_write_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((result_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln52_fu_130_p2 = (icmp_ln879_3_fu_124_p2 & icmp_ln879_2_fu_118_p2);

assign and_ln61_fu_152_p2 = (icmp_ln879_fu_140_p2 & icmp_ln879_1_fu_146_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((result_V_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)) | ((result_V_V_full_n == 1'b0) & (ap_predicate_op19_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op19_write_state2 = ((1'd1 == and_ln52_fu_130_p2) & (fatherSearch_read_read_fu_42_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op29_write_state2 = ((1'd1 == and_ln61_fu_152_p2) & (fatherSearch_read_read_fu_42_p2 == 1'd1));
end

assign fatherSearch_read_read_fu_42_p2 = fatherSearch;

assign grp_fu_82_p4 = {{tree_V_q0[23:13]}};

assign icmp_ln879_1_fu_146_p2 = ((trunc_ln647_fu_136_p1 == relationship_V) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_118_p2 = ((grp_fu_82_p4 == nodo_V) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_124_p2 = ((trunc_ln647_1_fu_114_p1 == relationship_V) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_140_p2 = ((p_Result_7_fu_104_p4 == nodo_V) ? 1'b1 : 1'b0);

assign p_Result_7_fu_104_p4 = {{tree_V_q0[12:2]}};

assign tree_V_address0 = 64'd0;

assign trunc_ln647_1_fu_114_p1 = tree_V_q0[1:0];

assign trunc_ln647_fu_136_p1 = tree_V_q0[1:0];

endmodule //busqueda_cam
