// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top_function.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<10> top_function::ap_const_lv10_0 = "0000000000";
const sc_logic top_function::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<24> top_function::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<11> top_function::ap_const_lv11_0 = "00000000000";
const sc_logic top_function::ap_const_logic_1 = sc_dt::Log_1;

top_function::top_function(sc_module_name name) : sc_module(name), mVcdFile(0) {
    busqueda_cam_U0 = new busqueda_cam("busqueda_cam_U0");
    busqueda_cam_U0->ap_clk(ap_clk);
    busqueda_cam_U0->ap_rst(ap_rst);
    busqueda_cam_U0->ap_start(busqueda_cam_U0_ap_start);
    busqueda_cam_U0->ap_done(busqueda_cam_U0_ap_done);
    busqueda_cam_U0->ap_continue(busqueda_cam_U0_ap_continue);
    busqueda_cam_U0->ap_idle(busqueda_cam_U0_ap_idle);
    busqueda_cam_U0->ap_ready(busqueda_cam_U0_ap_ready);
    busqueda_cam_U0->tree_V_address0(busqueda_cam_U0_tree_V_address0);
    busqueda_cam_U0->tree_V_ce0(busqueda_cam_U0_tree_V_ce0);
    busqueda_cam_U0->tree_V_q0(tree_V_q0);
    busqueda_cam_U0->nodo_V(nodo_V);
    busqueda_cam_U0->relationship_V(relationship_V);
    busqueda_cam_U0->fatherSearch(fatherSearch);
    busqueda_cam_U0->result_V_V_din(busqueda_cam_U0_result_V_V_din);
    busqueda_cam_U0->result_V_V_full_n(result_V_V_full_n);
    busqueda_cam_U0->result_V_V_write(busqueda_cam_U0_result_V_V_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( busqueda_cam_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( busqueda_cam_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( busqueda_cam_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( busqueda_cam_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( busqueda_cam_U0_ap_ready );

    SC_METHOD(thread_busqueda_cam_U0_ap_continue);

    SC_METHOD(thread_busqueda_cam_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_busqueda_cam_U0_start_full_n);

    SC_METHOD(thread_busqueda_cam_U0_start_write);

    SC_METHOD(thread_result_V_V_din);
    sensitive << ( busqueda_cam_U0_result_V_V_din );

    SC_METHOD(thread_result_V_V_write);
    sensitive << ( busqueda_cam_U0_result_V_V_write );

    SC_METHOD(thread_tree_V_address0);
    sensitive << ( busqueda_cam_U0_tree_V_address0 );

    SC_METHOD(thread_tree_V_address1);

    SC_METHOD(thread_tree_V_ce0);
    sensitive << ( busqueda_cam_U0_tree_V_ce0 );

    SC_METHOD(thread_tree_V_ce1);

    SC_METHOD(thread_tree_V_d0);

    SC_METHOD(thread_tree_V_d1);

    SC_METHOD(thread_tree_V_we0);

    SC_METHOD(thread_tree_V_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_function_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, tree_V_address0, "(port)tree_V_address0");
    sc_trace(mVcdFile, tree_V_ce0, "(port)tree_V_ce0");
    sc_trace(mVcdFile, tree_V_d0, "(port)tree_V_d0");
    sc_trace(mVcdFile, tree_V_q0, "(port)tree_V_q0");
    sc_trace(mVcdFile, tree_V_we0, "(port)tree_V_we0");
    sc_trace(mVcdFile, tree_V_address1, "(port)tree_V_address1");
    sc_trace(mVcdFile, tree_V_ce1, "(port)tree_V_ce1");
    sc_trace(mVcdFile, tree_V_d1, "(port)tree_V_d1");
    sc_trace(mVcdFile, tree_V_q1, "(port)tree_V_q1");
    sc_trace(mVcdFile, tree_V_we1, "(port)tree_V_we1");
    sc_trace(mVcdFile, nodo_V, "(port)nodo_V");
    sc_trace(mVcdFile, relationship_V, "(port)relationship_V");
    sc_trace(mVcdFile, fatherSearch, "(port)fatherSearch");
    sc_trace(mVcdFile, result_V_V_din, "(port)result_V_V_din");
    sc_trace(mVcdFile, result_V_V_full_n, "(port)result_V_V_full_n");
    sc_trace(mVcdFile, result_V_V_write, "(port)result_V_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, busqueda_cam_U0_ap_start, "busqueda_cam_U0_ap_start");
    sc_trace(mVcdFile, busqueda_cam_U0_ap_done, "busqueda_cam_U0_ap_done");
    sc_trace(mVcdFile, busqueda_cam_U0_ap_continue, "busqueda_cam_U0_ap_continue");
    sc_trace(mVcdFile, busqueda_cam_U0_ap_idle, "busqueda_cam_U0_ap_idle");
    sc_trace(mVcdFile, busqueda_cam_U0_ap_ready, "busqueda_cam_U0_ap_ready");
    sc_trace(mVcdFile, busqueda_cam_U0_tree_V_address0, "busqueda_cam_U0_tree_V_address0");
    sc_trace(mVcdFile, busqueda_cam_U0_tree_V_ce0, "busqueda_cam_U0_tree_V_ce0");
    sc_trace(mVcdFile, busqueda_cam_U0_result_V_V_din, "busqueda_cam_U0_result_V_V_din");
    sc_trace(mVcdFile, busqueda_cam_U0_result_V_V_write, "busqueda_cam_U0_result_V_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, busqueda_cam_U0_start_full_n, "busqueda_cam_U0_start_full_n");
    sc_trace(mVcdFile, busqueda_cam_U0_start_write, "busqueda_cam_U0_start_write");
#endif

    }
    mHdltvinHandle.open("top_function.hdltvin.dat");
    mHdltvoutHandle.open("top_function.hdltvout.dat");
}

top_function::~top_function() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete busqueda_cam_U0;
}

void top_function::thread_ap_done() {
    ap_done = busqueda_cam_U0_ap_done.read();
}

void top_function::thread_ap_idle() {
    ap_idle = busqueda_cam_U0_ap_idle.read();
}

void top_function::thread_ap_ready() {
    ap_ready = busqueda_cam_U0_ap_ready.read();
}

void top_function::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void top_function::thread_ap_sync_done() {
    ap_sync_done = busqueda_cam_U0_ap_done.read();
}

void top_function::thread_ap_sync_ready() {
    ap_sync_ready = busqueda_cam_U0_ap_ready.read();
}

void top_function::thread_busqueda_cam_U0_ap_continue() {
    busqueda_cam_U0_ap_continue = ap_const_logic_1;
}

void top_function::thread_busqueda_cam_U0_ap_start() {
    busqueda_cam_U0_ap_start = ap_start.read();
}

void top_function::thread_busqueda_cam_U0_start_full_n() {
    busqueda_cam_U0_start_full_n = ap_const_logic_1;
}

void top_function::thread_busqueda_cam_U0_start_write() {
    busqueda_cam_U0_start_write = ap_const_logic_0;
}

void top_function::thread_result_V_V_din() {
    result_V_V_din = busqueda_cam_U0_result_V_V_din.read();
}

void top_function::thread_result_V_V_write() {
    result_V_V_write = busqueda_cam_U0_result_V_V_write.read();
}

void top_function::thread_tree_V_address0() {
    tree_V_address0 = busqueda_cam_U0_tree_V_address0.read();
}

void top_function::thread_tree_V_address1() {
    tree_V_address1 = ap_const_lv10_0;
}

void top_function::thread_tree_V_ce0() {
    tree_V_ce0 = busqueda_cam_U0_tree_V_ce0.read();
}

void top_function::thread_tree_V_ce1() {
    tree_V_ce1 = ap_const_logic_0;
}

void top_function::thread_tree_V_d0() {
    tree_V_d0 = ap_const_lv24_0;
}

void top_function::thread_tree_V_d1() {
    tree_V_d1 = ap_const_lv24_0;
}

void top_function::thread_tree_V_we0() {
    tree_V_we0 = ap_const_logic_0;
}

void top_function::thread_tree_V_we1() {
    tree_V_we1 = ap_const_logic_0;
}

void top_function::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"tree_V_address0\" :  \"" << tree_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tree_V_ce0\" :  \"" << tree_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tree_V_d0\" :  \"" << tree_V_d0.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"tree_V_q0\" :  \"" << tree_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tree_V_we0\" :  \"" << tree_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tree_V_address1\" :  \"" << tree_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tree_V_ce1\" :  \"" << tree_V_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tree_V_d1\" :  \"" << tree_V_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tree_V_q1\" :  \"" << tree_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tree_V_we1\" :  \"" << tree_V_we1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nodo_V\" :  \"" << nodo_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"relationship_V\" :  \"" << relationship_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fatherSearch\" :  \"" << fatherSearch.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_V_V_din\" :  \"" << result_V_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"result_V_V_full_n\" :  \"" << result_V_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_V_V_write\" :  \"" << result_V_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

