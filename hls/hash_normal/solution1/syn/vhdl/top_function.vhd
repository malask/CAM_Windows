-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_function is
port (
    tree_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tree_V_ce0 : OUT STD_LOGIC;
    tree_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tree_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    tree_V_we0 : OUT STD_LOGIC;
    tree_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tree_V_ce1 : OUT STD_LOGIC;
    tree_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    tree_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    tree_V_we1 : OUT STD_LOGIC;
    nodo_V : IN STD_LOGIC_VECTOR (10 downto 0);
    relationship_V : IN STD_LOGIC_VECTOR (1 downto 0);
    fatherSearch : IN STD_LOGIC;
    result_V_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    result_V_V_full_n : IN STD_LOGIC;
    result_V_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of top_function is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_function,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.888000,HLS_SYN_LAT=2,HLS_SYN_TPT=3,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4,HLS_SYN_LUT=114,HLS_VERSION=2019_1}";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal busqueda_cam_U0_ap_start : STD_LOGIC;
    signal busqueda_cam_U0_ap_done : STD_LOGIC;
    signal busqueda_cam_U0_ap_continue : STD_LOGIC;
    signal busqueda_cam_U0_ap_idle : STD_LOGIC;
    signal busqueda_cam_U0_ap_ready : STD_LOGIC;
    signal busqueda_cam_U0_tree_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal busqueda_cam_U0_tree_V_ce0 : STD_LOGIC;
    signal busqueda_cam_U0_result_V_V_din : STD_LOGIC_VECTOR (10 downto 0);
    signal busqueda_cam_U0_result_V_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal busqueda_cam_U0_start_full_n : STD_LOGIC;
    signal busqueda_cam_U0_start_write : STD_LOGIC;

    component busqueda_cam IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tree_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        tree_V_ce0 : OUT STD_LOGIC;
        tree_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        nodo_V : IN STD_LOGIC_VECTOR (10 downto 0);
        relationship_V : IN STD_LOGIC_VECTOR (1 downto 0);
        fatherSearch : IN STD_LOGIC;
        result_V_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        result_V_V_full_n : IN STD_LOGIC;
        result_V_V_write : OUT STD_LOGIC );
    end component;



begin
    busqueda_cam_U0 : component busqueda_cam
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => busqueda_cam_U0_ap_start,
        ap_done => busqueda_cam_U0_ap_done,
        ap_continue => busqueda_cam_U0_ap_continue,
        ap_idle => busqueda_cam_U0_ap_idle,
        ap_ready => busqueda_cam_U0_ap_ready,
        tree_V_address0 => busqueda_cam_U0_tree_V_address0,
        tree_V_ce0 => busqueda_cam_U0_tree_V_ce0,
        tree_V_q0 => tree_V_q0,
        nodo_V => nodo_V,
        relationship_V => relationship_V,
        fatherSearch => fatherSearch,
        result_V_V_din => busqueda_cam_U0_result_V_V_din,
        result_V_V_full_n => result_V_V_full_n,
        result_V_V_write => busqueda_cam_U0_result_V_V_write);




    ap_done <= busqueda_cam_U0_ap_done;
    ap_idle <= busqueda_cam_U0_ap_idle;
    ap_ready <= busqueda_cam_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= busqueda_cam_U0_ap_done;
    ap_sync_ready <= busqueda_cam_U0_ap_ready;
    busqueda_cam_U0_ap_continue <= ap_const_logic_1;
    busqueda_cam_U0_ap_start <= ap_start;
    busqueda_cam_U0_start_full_n <= ap_const_logic_1;
    busqueda_cam_U0_start_write <= ap_const_logic_0;
    result_V_V_din <= busqueda_cam_U0_result_V_V_din;
    result_V_V_write <= busqueda_cam_U0_result_V_V_write;
    tree_V_address0 <= busqueda_cam_U0_tree_V_address0;
    tree_V_address1 <= ap_const_lv10_0;
    tree_V_ce0 <= busqueda_cam_U0_tree_V_ce0;
    tree_V_ce1 <= ap_const_logic_0;
    tree_V_d0 <= ap_const_lv24_0;
    tree_V_d1 <= ap_const_lv24_0;
    tree_V_we0 <= ap_const_logic_0;
    tree_V_we1 <= ap_const_logic_0;
end behav;
